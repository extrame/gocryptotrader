// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/cryptotrader.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	grpc/cryptotrader.proto

It has these top-level messages:
	EnabledExchangeCurrencies
	AllEnabledExchangeCurrencies
	SpecificTicker
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import ticker "github.com/extrame/gocryptotrader/exchanges/ticker"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EnabledExchangeCurrencies struct {
	ExchangeName   string          `protobuf:"bytes,1,opt,name=ExchangeName" json:"ExchangeName,omitempty"`
	ExchangeValues []*ticker.Price `protobuf:"bytes,2,rep,name=ExchangeValues" json:"ExchangeValues,omitempty"`
}

func (m *EnabledExchangeCurrencies) Reset()                    { *m = EnabledExchangeCurrencies{} }
func (m *EnabledExchangeCurrencies) String() string            { return proto.CompactTextString(m) }
func (*EnabledExchangeCurrencies) ProtoMessage()               {}
func (*EnabledExchangeCurrencies) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EnabledExchangeCurrencies) GetExchangeName() string {
	if m != nil {
		return m.ExchangeName
	}
	return ""
}

func (m *EnabledExchangeCurrencies) GetExchangeValues() []*ticker.Price {
	if m != nil {
		return m.ExchangeValues
	}
	return nil
}

type AllEnabledExchangeCurrencies struct {
	ExchangeCurrencies []*EnabledExchangeCurrencies `protobuf:"bytes,1,rep,name=ExchangeCurrencies" json:"ExchangeCurrencies,omitempty"`
}

func (m *AllEnabledExchangeCurrencies) Reset()                    { *m = AllEnabledExchangeCurrencies{} }
func (m *AllEnabledExchangeCurrencies) String() string            { return proto.CompactTextString(m) }
func (*AllEnabledExchangeCurrencies) ProtoMessage()               {}
func (*AllEnabledExchangeCurrencies) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllEnabledExchangeCurrencies) GetExchangeCurrencies() []*EnabledExchangeCurrencies {
	if m != nil {
		return m.ExchangeCurrencies
	}
	return nil
}

type SpecificTicker struct {
	Currency     string `protobuf:"bytes,1,opt,name=Currency" json:"Currency,omitempty"`
	ExchangeName string `protobuf:"bytes,2,opt,name=ExchangeName" json:"ExchangeName,omitempty"`
	AssetType    string `protobuf:"bytes,3,opt,name=AssetType" json:"AssetType,omitempty"`
}

func (m *SpecificTicker) Reset()                    { *m = SpecificTicker{} }
func (m *SpecificTicker) String() string            { return proto.CompactTextString(m) }
func (*SpecificTicker) ProtoMessage()               {}
func (*SpecificTicker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SpecificTicker) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *SpecificTicker) GetExchangeName() string {
	if m != nil {
		return m.ExchangeName
	}
	return ""
}

func (m *SpecificTicker) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

func init() {
	proto.RegisterType((*EnabledExchangeCurrencies)(nil), "grpc.EnabledExchangeCurrencies")
	proto.RegisterType((*AllEnabledExchangeCurrencies)(nil), "grpc.AllEnabledExchangeCurrencies")
	proto.RegisterType((*SpecificTicker)(nil), "grpc.SpecificTicker")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for GoCryptoTraderService service

type GoCryptoTraderServiceClient interface {
	GetTickers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc1.CallOption) (*AllEnabledExchangeCurrencies, error)
	GetTicker(ctx context.Context, in *SpecificTicker, opts ...grpc1.CallOption) (*ticker.Price, error)
}

type goCryptoTraderServiceClient struct {
	cc *grpc1.ClientConn
}

func NewGoCryptoTraderServiceClient(cc *grpc1.ClientConn) GoCryptoTraderServiceClient {
	return &goCryptoTraderServiceClient{cc}
}

func (c *goCryptoTraderServiceClient) GetTickers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc1.CallOption) (*AllEnabledExchangeCurrencies, error) {
	out := new(AllEnabledExchangeCurrencies)
	err := grpc1.Invoke(ctx, "/grpc.GoCryptoTraderService/GetTickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCryptoTraderServiceClient) GetTicker(ctx context.Context, in *SpecificTicker, opts ...grpc1.CallOption) (*ticker.Price, error) {
	out := new(ticker.Price)
	err := grpc1.Invoke(ctx, "/grpc.GoCryptoTraderService/GetTicker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoCryptoTraderService service

type GoCryptoTraderServiceServer interface {
	GetTickers(context.Context, *google_protobuf.Empty) (*AllEnabledExchangeCurrencies, error)
	GetTicker(context.Context, *SpecificTicker) (*ticker.Price, error)
}

func RegisterGoCryptoTraderServiceServer(s *grpc1.Server, srv GoCryptoTraderServiceServer) {
	s.RegisterService(&_GoCryptoTraderService_serviceDesc, srv)
}

func _GoCryptoTraderService_GetTickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCryptoTraderServiceServer).GetTickers(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.GoCryptoTraderService/GetTickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCryptoTraderServiceServer).GetTickers(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCryptoTraderService_GetTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecificTicker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCryptoTraderServiceServer).GetTicker(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.GoCryptoTraderService/GetTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCryptoTraderServiceServer).GetTicker(ctx, req.(*SpecificTicker))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoCryptoTraderService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.GoCryptoTraderService",
	HandlerType: (*GoCryptoTraderServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "GetTickers",
			Handler:    _GoCryptoTraderService_GetTickers_Handler,
		},
		{
			MethodName: "GetTicker",
			Handler:    _GoCryptoTraderService_GetTicker_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "grpc/cryptotrader.proto",
}

func init() { proto.RegisterFile("grpc/cryptotrader.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcf, 0x4f, 0xc2, 0x30,
	0x18, 0x65, 0x60, 0x8c, 0x54, 0xe5, 0xd0, 0xf8, 0x63, 0x4e, 0x12, 0x49, 0x4f, 0x9c, 0xda, 0x04,
	0xe3, 0xd5, 0x84, 0x10, 0x42, 0xe2, 0x41, 0x0d, 0x10, 0xef, 0x5b, 0xf9, 0x18, 0x8d, 0xdb, 0xda,
	0x74, 0x1d, 0x61, 0x7f, 0x89, 0xff, 0xae, 0x59, 0x0b, 0x28, 0x02, 0x1e, 0xfb, 0xfa, 0xde, 0xf7,
	0xbe, 0xf7, 0x3d, 0x74, 0x1b, 0x6b, 0xc5, 0x19, 0xd7, 0xa5, 0x32, 0xd2, 0xe8, 0x70, 0x06, 0x9a,
	0x2a, 0x2d, 0x8d, 0xc4, 0x27, 0xd5, 0x47, 0x70, 0x1f, 0x4b, 0x19, 0x27, 0xc0, 0x2c, 0x16, 0x15,
	0x73, 0x06, 0xa9, 0x32, 0xa5, 0xa3, 0x04, 0xcf, 0xb1, 0x30, 0x8b, 0x22, 0xa2, 0x5c, 0xa6, 0x0c,
	0x56, 0x46, 0x87, 0x29, 0xb0, 0x58, 0xfe, 0x9e, 0xc5, 0x60, 0xc5, 0x17, 0x61, 0x16, 0x43, 0xce,
	0x8c, 0xe0, 0x9f, 0xa0, 0x99, 0xd2, 0x82, 0x83, 0xd3, 0x93, 0x25, 0xba, 0x1b, 0x66, 0x61, 0x94,
	0xc0, 0x6c, 0xb8, 0xa6, 0x0d, 0x0a, 0xad, 0x21, 0xe3, 0x02, 0x72, 0x4c, 0xd0, 0xc5, 0x06, 0x7d,
	0x0d, 0x53, 0xf0, 0xbd, 0x8e, 0xd7, 0x6d, 0x8e, 0x77, 0x30, 0xfc, 0x84, 0x5a, 0x9b, 0xf7, 0x47,
	0x98, 0x14, 0x90, 0xfb, 0xf5, 0x4e, 0xa3, 0x7b, 0xde, 0xbb, 0xa4, 0xce, 0x8d, 0xbe, 0x57, 0x6e,
	0xe3, 0x3f, 0x24, 0x22, 0x51, 0xbb, 0x9f, 0x24, 0xc7, 0xad, 0xdf, 0x10, 0xde, 0x47, 0x7d, 0xcf,
	0x8e, 0x7e, 0xa0, 0xd5, 0x5d, 0xe8, 0x51, 0xf1, 0xf8, 0x80, 0x94, 0x64, 0xa8, 0x35, 0x51, 0xc0,
	0xc5, 0x5c, 0xf0, 0xa9, 0x5d, 0x0c, 0x07, 0xe8, 0x6c, 0xfd, 0x5f, 0xae, 0x93, 0x6d, 0xdf, 0x7b,
	0xc9, 0xeb, 0x07, 0x92, 0xb7, 0x51, 0xb3, 0x9f, 0xe7, 0x60, 0xa6, 0xa5, 0x02, 0xbf, 0x61, 0x09,
	0x3f, 0x40, 0xef, 0xcb, 0x43, 0xd7, 0x23, 0x39, 0xb0, 0x45, 0x4c, 0x6d, 0x11, 0x13, 0xd0, 0x4b,
	0xc1, 0x01, 0xbf, 0x20, 0x34, 0x02, 0xe3, 0x96, 0xc8, 0xf1, 0x0d, 0x75, 0xf5, 0xd2, 0x4d, 0xbd,
	0x74, 0x58, 0xd5, 0x1b, 0x10, 0x17, 0xf2, 0xbf, 0x23, 0x91, 0x1a, 0xee, 0xa1, 0xe6, 0x76, 0x16,
	0xbe, 0x72, 0x92, 0xdd, 0x98, 0xc1, 0x6e, 0x11, 0xa4, 0x16, 0x9d, 0x5a, 0xa7, 0xc7, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8a, 0x8d, 0xd0, 0xad, 0x77, 0x02, 0x00, 0x00,
}
